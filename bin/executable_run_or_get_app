#!/bin/bash

# TODO Refactor this

read -r -d '' HELP <<"EOF"
Usage: run_or_get_app [-h | --help] [-d | --debug] [-u | --update] [-i | --ignore-from <PATH>] <APPLICATION> [ARGS]...

Tries to run the given application with the given args, if it's not installed it will try to install it. It is expected that this script is called by a wrapper for the application
 which provides the environment variables described below.
If the -u or --update flag is given, it will try to update the application before running it using the environment variables described below.
If the application is not installed, it will use environment variable(s) to find installers for the application

Environment variables (- are replaced with _):
 <ARCHITECTURE>_<APPLICATION>_INSTALLER_<TYPE>=<VALUE>
  Where:
   <ARCHITECTURE> is the architecture of the machine as output by $(uname -m). eg. x86_64, armv7l, aarch64, armhf.
      Alternatively, if the application is architecture independent, use 'all'
   <APPLICATION> is the name of the binary
   <TYPE> is the type of installer, see 'Installer Types' below
   <VALUE> is the the value to use, dependent on installer type
   Examples:
    x86_64_rg_INSTALLER_APT = ripgrep
    armv7l_rg_INSTALLER_APT = ripgrep
    aarch64_rg_INSTALLER_YUM = ripgrep
    armhf_rg_INSTALLER_EGET = BurntSushi/ripgrep
    all_rg_INSTALLER_APT = ripgrep
    x86_64_rg_INSTALLER_ARCHIVE = "https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep-13.0.0-x86_64-unknown-linux-musl.tar.gz"

 <ARCHITECTURE>_<APPLICATION>_INSTALLER_ARCHIVE_BINARY=<VALUE>
   If the application is installed in an archive, this is the path to the binary once the archive is extracted (relative to the archive)

 <ARCHITECTURE>_<APPLICATION>_INSTALLER_ARCHIVE_EXTRACT_COMMAND=<VALUE>
    The command to use to extract the archive, if not given, will try and guess (eg. tar -xzf)

 EXECUTABLE_FINAL_PATH=<PATH>
   The path to install the application to. Defaults to $HOME/.local/bin

Installer Types:
 - ARCHIVE - A common archive, eg. a tarball, gzip, zip etc. <VALUE> is expected to be a URL.
 - APT - Provided by apt. <VALUE> is expected to be the name of the package.
 - YUM - Provided by yum. <VALUE> is expected to be the name of the package.
 - BINARY - A single binary. <VALUE> is expected to be a URL.
 - CARGO - Provided by cargo. <VALUE> is expected to be the name of the package.
 - EGET - Uses the eget utility. <VALUE> is expected to be the GitHub repo to install from, eg. BurntSushi/ripgrep

Options:
  -h --help
  -i | --ignore-from <PATH> - Ignore the given file, if it exists, when looking for paths to run applications from (Can be specified multiple times, defaults to the dir of this script)
  -d | --debug        Print debug information directly to TTY

The following locations should be added to your PATH, in this order:
  - "$HOME/bin" - Early in the path, so this script is on your path
  - "$HOME/bin/wrappers" - (Or your WRAPPERS_PATH) So the wrapper is always used to launch the application (For updating etc)
  - "$HOME/.local/bin" - (Or your EXECUTABLE_FINAL_PATH) After the wrappers, so the wrapper is used to launch the application

  Example, for bash:
    export PATH="$HOME/bin:$HOME/bin/wrappers:$HOME/.local/bin:$PATH"
EOF
#set -x
supported_installer_types=("ARCHIVE" "BINARY" "CARGO" "EGET")
# Ignore the directory this script is in
IGNORE_FROM=("$(dirname "$0")")
EXECUTABLE_FINAL_PATH=${EXECUTABLE_FINAL_PATH:-"$HOME/.local/bin"}
WRAPPERS_PATH=${WRAPPERS_PATH:-"$HOME/bin/wrappers"}
BINARY_ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
  -h | --help)
    echo "$HELP"
    exit 0
    ;;
  -u | --update)
    UPDATE=true
    shift
    ;;
  -i | --ignore-from)
    IGNORE_FROM+=("$2")
    shift 2
    ;;
  -d | --debug)
    DEBUG=true
    shift
    ;;
  *)
    BINARY="$1"
    shift
    BINARY_ARGS+=("$@")
    break
    ;;
  esac
done

#### Functions ####

# Override err to write directly to stderr if we have a tty
#  because a lot of applications grab output from stdout and we don't want to
#  pollute it

### Helpers ###

function err() {
  if [ -t 1 ]; then
    stderr "$@"
  fi
}

function stderr() {
  cat <<<"$@" 1>&2
}

function debug() { if [ "$DEBUG" = true ]; then err "$@"; fi; }

function extract() {
  if [ -f "$1" ]; then
    case $1 in
    *.tar.xz) tar -xvf "$1" ;;
    *.tar.bz2) tar -jxvf "$1" ;;
    *.tar.gz) tar -zxvf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.dmg) hdiutil mount "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar -xvf "$1" ;;
    *.tbz2) tar -jxvf "$1" ;;
    *.tgz) tar -zxvf "$1" ;;
    *.zip) unzip "$1" ;;
    *.pax) pax -rf "$1" ;;
    *.pax.z) uncompress "$1" --stdout | pax -r ;;
    *.rar) 7z x "$1" ;;
    *.z) uncompress "$1" ;;
    *.7z) 7z x "$1" ;;
    *) err "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
    err "'$1' is not a valid file!"
  fi
}

function join_by() {
  local d=${1-} f=${2-}
  if shift 2; then
    printf %s "$f" "${@/#/$d}"
  fi
}

function check_if_installer_type_is_useable() {
  local installer_type="$1"
  debug "Checking if installer type $installer_type is useable"
  installer_type_validation_function="can_use_type_${installer_type}"
  if ! [[ $(type -t "$installer_type_validation_function") == function ]]; then
    err "Installer type $installer_type is not supported (no validation function $installer_type_validation_function)"
    return 1
  fi
  if ! "$installer_type_validation_function"; then
    err "Installer type $installer_type is not useable"
    return 1
  fi
}

### Setup ###

if command -v apt >/dev/null; then
  supported_installer_types+=("APT")
fi
if command -v yum >/dev/null; then
  supported_installer_types+=("YUM")
fi

### Env Var Installer Handling ###

## Search for valid env vars to use for installers ##
function get_installer() {
  local architecture="$1"
  local program_name="$2"
  local installer_var
  for installer_type in "${supported_installer_types[@]}"; do
    local variable_name="${architecture}_${program_name}_INSTALLER_${installer_type}"
    local variable_value="${!variable_name}"
    if [ -n "$variable_value" ] && check_if_installer_type_is_useable "${installer_type}"; then
      installer_var="${variable_name}"
      break
    fi
  done
  echo "$installer_var"
}

## Set up get_installer
function get_binary() {
  local program_name="${1/-/_}"
  local installer_var
  local architecture
  architecture="$(uname -m)"
  installer_var="$(get_installer "$architecture" "$program_name")"
  if [ -z "$installer_var" ]; then
    err "No install sources found for $program_name for architecture $(uname -m)"
    exit 1
  fi
  installer_type="${installer_var#*_INSTALLER_}"
  handle_installer_type "$installer_type" "${installer_var}" "${!installer_var}"
}

### Look for and run if binary exists, otherwise download and run ###
function call_binary() {
  local program_name="$1"
  local is_retry="$2"
  local -n args="$3"
  debug "Want to run: $program_name ${args[*]}"
  local executables_on_path
  # Some might object to me using 'which' here, because it's slow. That's true, but it outputs the format I need faster than I can format type's format.
  # Benchmarked using hyperfine
  # Benchmark 1: which -a exa
  #   Time (mean ± σ):      51.5 ms ±   5.9 ms    [User: 8.8 ms, System: 3.4 ms]
  #   Range (min … max):    42.2 ms …  67.7 ms    100 runs

  # Benchmark 1: type -fa exa
  #   Time (mean ± σ):      54.6 ms ±   5.3 ms    [User: 8.1 ms, System: 4.6 ms]
  #   Range (min … max):    42.4 ms …  69.1 ms    100 runs

  # Benchmark 1: type -a exa
  #   Time (mean ± σ):      53.0 ms ±   6.7 ms    [User: 6.9 ms, System: 5.0 ms]
  #   Range (min … max):    41.9 ms …  76.6 ms    100 runs
  executables_on_path=$(which -a "$program_name")
  debug "Matching executables on path: ${executables_on_path[*]}"
  # For each path in IGNORE_FROM, remove it from the list of executables on path
  for path in "${IGNORE_FROM[@]}"; do
    debug "Removing $path from executables on path"
    executables_on_path=$(echo "$executables_on_path" | grep -v "$path")
  done
  first_result=$(echo "$executables_on_path" | head -n 1)
  debug "First matching executable: $first_result"
  if [ -z "$first_result" ] && [ "$is_retry" == "true" ]; then
    err "We tried to install but still didn't find $program_name on path afterwards. Exiting."
    exit 1
  elif [ -z "$first_result" ]; then
    stderr "Could not find $program_name on path, attempting to install"
    if get_binary "$program_name"; then
      call_binary "$program_name" true "${args[@]}"
    else
      err "Could not install $program_name"
      exit 1
    fi
  else
    "$first_result" "${args[@]}"
  fi

}







function handle_installer_type() {
  local installer_type="$1"
  local installer_var="$2"
  local installer_value="$3"
  case "$installer_type" in
  ARCHIVE)
    handle_archive_installer "$installer_var" "$installer_value"
    ;;
  APT)
    handle_apt_installer "$installer_var" "$installer_value"
    ;;
  YUM)
    handle_yum_installer "$installer_var" "$installer_value"
    ;;
  BINARY)
    handle_binary_installer "$installer_var" "$installer_value"
    ;;
  CARGO)
    handle_cargo_installer "$installer_var" "$installer_value"
    ;;
  *)
    err "Unsupported installer type: $installer_type"
    exit 1
    ;;
  esac
}

function handle_cargo_installer() {
  local installer_var="$1"
  local installer_value="$2"
  local program_name="${installer_var%_*}"
  program_name="${program_name#*_}"
  install_from_pkg_if_not_installed cargo
  cargo install "$installer_value"
}

function handle_binary_installer() {
  local installer_var="$1"
  local installer_value="$2"
  local binary_install_location_var="${installer_var%_INSTALLER_*}_INSTALLER_BINARY_INSTALL_LOCATION"
  local binary_install_location="${!binary_install_location_var}"
  if [ -z "$binary_install_location" ]; then
    err "No binary install location found for $installer_var"
    exit 1
  fi
  sudo curl -L "$installer_value" -o "$binary_install_location"
  sudo chmod +x "$binary_install_location"
}

function handle_archive_installer() {
  local installer_var="$1"
  local installer_value="$2"
  local binary_path_var="${installer_var}_BINARY"
  local install_path_var="${installer_var}_INSTALL_LOCATION"
  local extract_command_var="${installer_var}_EXTRACT_COMMAND"
  local binary_path="${!binary_path_var}"
  local install_path="${!install_path_var}"
  local extract_command="${!extract_command_var}"
  local tmpdir
  tmpdir="$(mktemp -d)"
  cd "$tmpdir" || exit 1
  curl -L "$installer_value" -o archive >/dev/null || exit 1
  $extract_command archive || exit 1
  sudo cp "$binary_path" "$install_path" || exit 1
  sudo chmod +x "$install_path" || exit 1
  err "Installed $binary_path to $install_path"
  cd - || exit 1
  rm -rf "$tmpdir"
}
function handle_apt_installer() {
  local installer_var="$1"
  local installer_value="$2"
  sudo apt-get install -y "$installer_value"
}
function handle_yum_installer() {
  local installer_var="$1"
  local installer_value="$2"
  sudo yum install -y "$installer_value"
}





#### Runtime ####

if [ -z "$BINARY" ]; then
  stderr "No binary specified"
  err "$HELP"
  exit 1
fi

call_binary "$BINARY" false BINARY_ARGS
